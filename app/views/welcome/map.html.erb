<!DOCTYPE html>
<html>
  <head>
  	<title>HPI Map</title>
	<meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
  	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==" crossorigin=""></script>
	<style>
		/* .marker_label {
			position: absolute;
			background-color: transparent;
			border: None;
			box-shadow: None;
			color: white;
			font-size: 100px;
		} */
		.leaflet-tooltip.marker_label{
			border-radius: 20px;
			background-color: transparent;
			padding-left: 0px;
			padding-right: 0px;
			font-weight: bold;
			border: None;
			color: black;
			box-shadow: None;
			font-family: Roboto, "Open Sans", sans-serif;
		}
		.leaflet-tooltip-top:before, 
		.leaflet-tooltip-bottom:before, 
		.leaflet-tooltip-left:before, 
		.leaflet-tooltip-right:before {
			border: none !important;
		}
	</style>
  </head>

  <body>
  <div class="leaflet">
  	<div id="map" style="width: 100%; height: 600px;"></div>
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.76.0/dist/L.Control.Locate.min.css" />
	<script src="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.76.0/dist/L.Control.Locate.min.js" charset="utf-8"></script>
	<%= javascript_include_tag 'OutdoorMap/geometry' %>
  	<script>
		//Set the leaflet map with center and zoom-level
		const standardZoomLevel = 17;
		const indoorZoomLevel = 19
	  	var mymap = L.map('map').setView([52.39300, 13.12900], standardZoomLevel);

		//Tileserver to be used as background
	  	L.tileLayer('https://api.maptiler.com/maps/basic/{z}/{x}/{y}.png?key=teiAXvgYrHq2mifMtHYX',{
			tileSize: 512,
			zoomOffset: -1,
			minZoom: 1,
			maxZoom: 23,
			attribution: "\u003ca href=\"https://www.maptiler.com/copyright/\" target=\"_blank\"\u003e\u0026copy; MapTiler\u003c/a\u003e \u003ca href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\"\u003e\u0026copy; OpenStreetMap contributors\u003c/a\u003e | Schnavigator",
			crossOrigin: true
		}).addTo(mymap);

		L.control.locate({
			locateOptions: {
				watch: true,
				enableHighAccuracy: true
			}
		}).addTo(mymap);
		
		var UniPotsdamStyle = {
				"fillColor": "Blue",
				"fillOpacity": 0.65,
				"color": "Blue",
				"opacity": 0.3
  			};

		var HPIStyle = {
				"fillColor": "Orange",
				"fillOpacity": 0.65,
				"color": "Orange",
				"opacity": 0.3
  			};
		
		var DormStyle = {
				"fillColor": "Green",
				"fillOpacity": 0.65,
				"color": "Green",
				"opacity": 0.3
  			};

		let layers = {}
		//buildings includes all geometry-data extracted from OSM, see campus.js
		//layers has the "feature" property as index, e.g. "Studentendorf Stahnsdorfer Straße"
		for (const feature of buildings) {
			//If the current campus (=group of buildings) is unknown, create a layergroup for it
			if(!layers[feature.properties.campus]) {
				layers[feature.properties.campus] = L.layerGroup().addTo(mymap);
				console.log("Added the following campus to layers: ", feature.properties.campus);
			}

			//Determine Style (highlighting-colour) dependent of group
			let layerStyle = UniPotsdamStyle;
			switch(feature.properties.campus) {
				case 'UP Campus Griebnitzsee': layerStyle = UniPotsdamStyle;
					break;
				case "Campus I": layerStyle = HPIStyle;
					break;
				case "Campus II": layerStyle = HPIStyle;
					break;
				case 'Campus III': layerStyle = HPIStyle;
					break;
				case "Studentendorf Stahnsdorfer Straße": layerStyle = DormStyle;
					break;
				default: console.log("This building does not belong to a known campus: ", feature);
					break;
			}

			//Add the building as a layer
			const layer = L.geoJSON(feature, {style: layerStyle});
			//Add a tooltip displaying the name of the building, taken from the GeoJSON
			layer.bindTooltip(feature.properties.name, {permanent: true, className: 'marker_label', offset: feature.properties.offset, direction: 'right'})
			//Add the building to its campus layergroup
			layers[feature.properties.campus].addLayer(layer);
		}

		// make names disappeared when zoomed out
		var lastZoom;
		mymap.on('zoomend', function() {
			var zoom = mymap.getZoom();
			if ((zoom < standardZoomLevel || zoom > indoorZoomLevel) && (!lastZoom || lastZoom >= standardZoomLevel || lastZoom <= indoorZoomLevel)) {
				mymap.eachLayer(function(layer) {
					if (layer.getTooltip()) {
						var tooltip = layer.getTooltip();
						layer.unbindTooltip().bindTooltip(tooltip, {
							permanent: false
						})
					}
				})
			} else if (zoom >= standardZoomLevel && zoom <= indoorZoomLevel && (!lastZoom || (lastZoom < standardZoomLevel || lastZoom > indoorZoomLevel))) {
				mymap.eachLayer(function(layer) {
					if (layer.getTooltip()) {
						var tooltip = layer.getTooltip();
						layer.unbindTooltip().bindTooltip(tooltip, {
							permanent: true
						})
					}
				});
			}
			lastZoom = zoom;
		})

		L.control.layers(null, layers).addTo(mymap);
  	</script>
  </div>
  </body>
</html>