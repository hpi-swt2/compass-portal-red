class ParamFormBuilder < ActionView::Helpers::FormBuilder
  def initialize(*args)
    # params are not passed as standard argument, because Ruby complains about too many arguments for `form_with`
    options = args.extract_options!
    params = options[:params] || {}

    @params = params
    super(*(args << options))
  end

  def self.create_custom_field(method_name)
    return unless method_name == :text_field

    define_method(method_name) do |name, *args|
      options = args.extract_options!
      options = update_options name, options
      super(name, *(args << options))
    end
  end

  # Allows the FormBuilder to update options of a form field conditionally.
  #
  # to be overridden
  #
  # @param _name The field name that is currently generated
  # @param options All options that the field that is currently generated receives
  # @return Updated options - make sure not to override options that should be kept (e.g. class), but add to them
  def update_options(_name, options: Hash)
    options
  end

  # Override methods for all field_helpers. They are dynamically generated by FormBuilder and here we override them
  field_helpers.each do |name|
    create_custom_field(name)
  end
end
